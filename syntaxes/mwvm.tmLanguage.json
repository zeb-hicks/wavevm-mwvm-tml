{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "WaveVM Assembly",
	"patterns": [
		{ "include": "#comments" },
		{
			"begin": "(\\.memory)",
			"end": "(\\.code)",
			"beginCaptures": { "1": { "name": "support.function" } },
			"endCaptures": { "1": { "name": "support.function" } },
			"patterns": [
				{
					"name": "constant.numeric",
					"match": "\\b[a-fA-F0-9]+\\b"
				},
				{ "include": "#comments" }
			]
		},
		{
			"match": "(\\.code)",
			"name": "support.function"
		},
		{ "include": "#comments" },
		{ "include": "#immediates" },
		{ "include": "#system" },
		{ "include": "#word" },
		{ "include": "#memory" },
		{ "include": "#math" },
		{ "include": "#comparison" },
		{ "include": "#shifts" },
		{ "include": "#bitops" },
		{ "include": "#specops" },
		{ "include": "#registers" },
		{ "include": "#literals" },
		{ "include": "#pointers" }
	],
	"repository": {
		"comments": {
			"patterns": [{
				"name": "comment.line.mwvm",
				"match": ";.*$"
			}]
		},
		"immediates": {
			"patterns": [{
				"name": "constant.numeric",
				"match": "^(\\![0-9a-fA-F]{1,4})"
			}]
		},
		"system": {
			"patterns": [{
				"name": "keyword.system.mwvm",
				"match": "\\b(nop|slp|sleep|hlt|halt)\\b"
			}]
		},
		"word": {
			"patterns": [{
				"name": "keyword.word.mwvm",
				"match": "\\b(wmov|wmove|wswap|wadd|wsub)\\b"
			}]
		},
		"memory": {
			"patterns": [{
				"name": "keyword.memory.mwvm",
				"match": "\\b(mov|move|swi|swizzle)\\b"
			}]
		},
		"math": {
			"patterns": [{
				"name": "keyword.math.mwvm",
				"match": "\\b(add|adds|sub|subs|eq|equ|ne|neq|car|cry|carry)(\\.[bw])?\\b"
			}]
		},
		"comparison": {
			"patterns": [{
				"name": "keyword.comparison.mwvm",
				"match": "\\b(lt|gt|le|lte|ge|gte)(\\.[bw])?\\b"
			}]
		},
		"shifts": {
			"patterns": [{
				"name": "keyword.shifts.mwvm",
				"match": "\\b(lsl|asl|rol|asr|lsr|ror)(\\.[bw])?\\b"
			}]
		},
		"bitops": {
			"patterns": [{
				"name": "keyword.bitops.mwvm",
				"match": "\\b(and|or|xor|nand|nor|xnor|not)(\\.[bw])?\\b"
			}]
		},
		"specops": {
			"patterns": [{
				"name": "keyword.specops.mwvm",
				"match": "\\b(hadd|dp|dot|nz|norm|normalize)\\b"
			}]
		},
		"registers": {
			"patterns": [{
				"begin": "\\b\\[?(r[0-7]+|c[0-7]+|ri+)\\+?\\]?",
				"beginCaptures": {
					"1": { "name": "constant.character.escape.mwvm" }
				},
				"end": "(\\.?)([xyzw]{1,4})?\\b",
				"endCaptures": {
					"1": { "name": "keyword.operator" },
					"2": { "name": "variable.other.constant" }
				}
			}]
		},
		"literals": {
			"name": "constant.numeric.mwvm",
			"begin": "\\b\\.(0x[0-9a-fA-F]+|[0-9]+)\\b",
			"end": "\\b"
		},
		"pointers": {
			"patterns": [{
				"name": "storage.mwvm",
				"match": "\\b\\[0-9a-fA-F]+\\+?\\b"
			}]
		}
	},
	"scopeName": "source.mwvm"
}
